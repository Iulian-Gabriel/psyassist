version: "3.8"

services:
  backend:
    build:
      context: .. # Build from parent directory
      dockerfile: .devcontainer/Dockerfile
    container_name: PsyAssist-backend
    env_file: .env
    volumes:
      # Mount source code but exclude node_modules
      - ..:/workspace:cached
      - backend_node_modules:/workspace/backend/node_modules
      - frontend_node_modules:/workspace/frontend/node_modules
    working_dir: /workspace/backend
    command: sh -c "while sleep 1000; do :; done"
    ports:
      - "${PORT}:${PORT}"
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRE_MINUTES: ${REFRESH_TOKEN_EXPIRE_MINUTES}
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: ${PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: .. # Build from parent directory
      dockerfile: .devcontainer/Dockerfile
    container_name: PsyAssist-frontend
    env_file: .env
    volumes:
      # Mount source code but exclude node_modules
      - ..:/workspace:cached
      - backend_node_modules:/workspace/backend/node_modules
      - frontend_node_modules:/workspace/frontend/node_modules
    working_dir: /workspace/frontend
    command: sh -c "while sleep 1000; do :; done"
    ports:
      - "3000:5173"
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_API_URL: http://backend:${PORT}/api
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    container_name: PsyAssist-db
    env_file: .env
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  backend_node_modules:
  frontend_node_modules:
  postgres_data:

networks:
  app-network:
    driver: bridge
