generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  doctor_id      Int              @id @default(autoincrement())
  employee_id    Int              @unique
  specialization String?          @db.VarChar(255)
  bio            String?
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  employee       Employee         @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
  notes          Notes[]
  services       Service[]
  ServiceRequest ServiceRequest[]

  @@map("DOCTOR")
}

model Employee {
  employee_id      Int       @id @default(autoincrement())
  user_id          Int       @unique
  job_title        String    @db.VarChar(100)
  hire_date        DateTime  @db.Date
  termination_date DateTime? @db.Date
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  doctor           Doctor?
  user             User      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("EMPLOYEE")
}

model Feedback {
  feedback_id        Int                @id @default(autoincrement())
  service_id         Int?
  participant_id     Int?
  rating_score       Int?
  comments           String?
  submission_date    DateTime           @default(now()) @db.Timestamp(6)
  is_anonymous       Boolean            @default(false)
  target_type        FeedbackTargetType
  is_clean_facilities      Boolean? @map("is_clean_facilities")
  is_friendly_staff        Boolean? @map("is_friendly_staff")
  is_easy_accessibility    Boolean? @map("is_easy_accessibility")
  is_smooth_admin_process  Boolean? @map("is_smooth_admin_process")
  serviceParticipant ServiceParticipant? @relation(fields: [participant_id], references: [participant_id], onDelete: NoAction, onUpdate: NoAction)
  service            Service?            @relation(fields: [service_id], references: [service_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("FEEDBACK")
}

model Notes {
  note_id            Int                 @id @default(autoincrement())
  service_id         Int?
  participant_id     Int?
  doctor_id          Int
  patient_id         Int
  content            String
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  updated_at         DateTime            @default(now()) @db.Timestamp(6)
  doctor             Doctor              @relation(fields: [doctor_id], references: [doctor_id], onDelete: Cascade, onUpdate: NoAction)
  patient            Patient             @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade, onUpdate: NoAction)
  serviceParticipant ServiceParticipant? @relation(fields: [participant_id], references: [participant_id], onDelete: NoAction, onUpdate: NoAction)
  service            Service?            @relation(fields: [service_id], references: [service_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("NOTES")
}

model Notices {
  notice_id            Int                @id @default(autoincrement())
  service_id           Int
  participant_id       Int
  issue_date           DateTime           @default(now()) @db.Date
  unique_notice_number String?            @unique @db.VarChar(50)
  expiry_date          DateTime?          @db.Date
  reason_for_issuance  String?
  fitness_status       String?            @db.VarChar(50)
  recommendations      String?
  attachment_path      String?            @db.VarChar(512)
  created_at           DateTime           @default(now()) @db.Timestamp(6)
  updated_at           DateTime           @default(now()) @db.Timestamp(6)
  serviceParticipant   ServiceParticipant @relation(fields: [participant_id], references: [participant_id], onDelete: NoAction, onUpdate: NoAction)
  service              Service            @relation(fields: [service_id], references: [service_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("NOTICES")
}

model Patient {
  patient_id              Int                  @id @default(autoincrement())
  user_id                 Int                  @unique
  emergency_contact_name  String?              @db.VarChar(200)
  emergency_contact_phone String?              @db.VarChar(20)
  tos_accepted            Boolean              @default(false)
  gdpr_accepted           Boolean              @default(false)
  tos_accepted_date       DateTime?            @db.Timestamp(3)
  gdpr_accepted_date      DateTime?            @db.Timestamp(3)
  created_at              DateTime             @default(now()) @db.Timestamp(6)
  updated_at              DateTime             @default(now()) @db.Timestamp(6)
  user                    User                 @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  notes                   Notes[]
  patientForms            PatientForm[]
  serviceParticipants     ServiceParticipant[]
  testInstances           TestInstance[]
  ServiceRequest          ServiceRequest[]

  @@map("PATIENT")
}

model PatientForm {
  form_id         Int      @id @default(autoincrement())
  patient_id      Int
  submission_date DateTime @default(now()) @db.Timestamp(6)
  form_data       Json     @db.Json
  status          String?  @default("Submitted") @db.VarChar(50)
  patient         Patient  @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("PATIENT_FORM")
}

model Permission {
  permission_id   Int               @id @default(autoincrement())
  permission_name String            @unique @db.VarChar(100)
  description     String?           @db.VarChar(255)
  rolePermissions RolePermissions[]

  @@map("PERMISSION")
}

model Role {
  role_id         Int               @id @default(autoincrement())
  role_name       String            @unique @db.VarChar(50)
  description     String?           @db.VarChar(255)
  rolePermissions RolePermissions[]
  userRoles       UserRoles[]

  @@map("ROLE")
}

model RolePermissions {
  role_id       Int
  permission_id Int
  assigned_at   DateTime   @default(now()) @db.Timestamp(6)
  permission    Permission @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction)
  role          Role       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([role_id, permission_id])
  @@map("ROLE_PERMISSIONS")
}

model Service {
  service_id          Int                  @id @default(autoincrement())
  employee_id         Int
  service_type        ServiceTypesEnum     @default(Consultation)
  start_time          DateTime             @db.Timestamp(6)
  end_time            DateTime             @db.Timestamp(6)
  status              String               @default("Scheduled") @db.VarChar(50)
  cancel_reason       String?              @db.VarChar(255)
  created_at          DateTime             @default(now()) @db.Timestamp(6)
  updated_at          DateTime             @default(now()) @db.Timestamp(6)
  feedbacks           Feedback[]
  notes               Notes[]
  notices             Notices[]
  doctor              Doctor               @relation(fields: [employee_id], references: [doctor_id], onDelete: NoAction, onUpdate: NoAction)
  serviceParticipants ServiceParticipant[]

  @@map("SERVICE")
}

model ServiceParticipant {
  participant_id    Int        @id @default(autoincrement())
  service_id        Int
  patient_id        Int
  attendance_status String?    @default("Expected") @db.VarChar(50)
  added_at          DateTime   @default(now()) @db.Timestamp(6)
  feedbacks         Feedback[]
  notes             Notes[]
  notices           Notices[]
  patient           Patient    @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)
  service           Service    @relation(fields: [service_id], references: [service_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([service_id, patient_id], map: "SERVICE_PARTICIPANT_service_id_patient_id_idx")
  @@map("SERVICE_PARTICIPANT")
}

model TestInstance {
  test_instance_id         Int                  @id @default(autoincrement())
  patient_id               Int?
  test_template_version_ID Int?
  testStartDate            DateTime?            @db.Timestamp(6)
  testStopDate             DateTime?            @db.Timestamp(6)
  patientResponse          Json?
  testTemplateVersion      TestTemplateVersion? @relation(fields: [test_template_version_ID], references: [test_template_version_ID], onDelete: NoAction, onUpdate: NoAction)
  patient                  Patient?             @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("TEST_INSTANCE")
}

model TestTemplate {
  test_template_id     Int                   @id @default(autoincrement())
  name                 String?
  isActive             Boolean?
  template_questions   Json?
  isExternal           Boolean?
  testTemplateVersions TestTemplateVersion[]

  @@map("TEST_TEMPLATE")
}

model TestTemplateVersion {
  test_template_version_ID Int            @id @default(autoincrement())
  test_template_id         Int?
  version                  Int?
  created_at               DateTime       @default(now()) @db.Timestamp(6)
  questionsJson            Json?          @db.Json
  testInstances            TestInstance[]
  testTemplate             TestTemplate?  @relation(fields: [test_template_id], references: [test_template_id])

  @@map("TEST_TEMPLATE_VERSION")
}

model User {
  user_id             Int         @id @default(autoincrement())
  email               String      @unique @db.VarChar(255)
  password_hash       String      @db.VarChar(255)
  first_name          String      @db.VarChar(100)
  last_name           String      @db.VarChar(100)
  date_of_birth       DateTime    @db.Date
  gender              GendersEnum @default(unspecified)
  phone_number        String?     @unique @db.VarChar(20)
  address_street      String?     @db.VarChar(255)
  address_city        String?     @db.VarChar(100)
  address_postal_code String?     @db.VarChar(20)
  address_country     String?     @db.VarChar(100)
  address_county      String?     @db.VarChar(100)
  is_active           Boolean     @default(true)
  created_at          DateTime    @default(now()) @db.Timestamp(6)
  updated_at          DateTime    @default(now()) @db.Timestamp(6)
  last_login_at       DateTime?   @db.Timestamp(6)
  employee            Employee?
  patient             Patient?
  userRoles           UserRoles[]

  @@map("USER")
}

model UserRoles {
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now()) @db.Timestamp(6)
  role        Role     @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, role_id])
  @@map("USER_ROLES")
}

model ServiceRequest {
  request_id          Int       @id @default(autoincrement())
  patient_id          Int
  service_type_id     Int
  preferred_doctor_id Int?
  preferred_date_1    DateTime
  preferred_date_2    DateTime?
  preferred_date_3    DateTime?
  preferred_time      String // "morning", "afternoon", "evening"
  reason              String
  urgent              Boolean   @default(false)
  additional_notes    String?
  status              String    @default("pending") // pending, approved, rejected, scheduled
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt

  // Relations
  patient          Patient     @relation(fields: [patient_id], references: [patient_id])
  service_type     ServiceType @relation(fields: [service_type_id], references: [service_type_id])
  preferred_doctor Doctor?     @relation(fields: [preferred_doctor_id], references: [doctor_id])

  @@map("SERVICE_REQUEST")
}

model ServiceType {
  service_type_id  Int     @id @default(autoincrement())
  name             String  @unique
  description      String?
  duration_minutes Int     @default(60)
  active           Boolean @default(true)

  // Relations
  serviceRequests ServiceRequest[]

  @@map("SERVICE_TYPE")
}

enum GendersEnum {
  male
  female
  unspecified

  @@map("genders_enum")
}

enum ServiceTypesEnum {
  Consultation
  Group_Consultation @map("Group Consultation")

  @@map("service_types_enum")
}

enum FeedbackTargetType {
  DOCTOR
  SERVICE

  @@map("feedback_target_type")
}
